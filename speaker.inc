; Audio bits
; Degrees Celcius. 1. 2. 3. 4. 5. 6. 7. 8. 9. 10. 11. 12. 13. 14. 15. 16. 17. 18. 19. 
; 20. 30. 40. 50. 60. 70. 80. 90. 100. 200. 300. Ramp to soak. Preheat/Soak. Ramp to peak. 
; Reflow. Cooling. Start. Stop. Warning, critical temperature!. Didn't reach the temperature in 60 seconds. Process aborted.
; LisaV3 (https://text-to-speech-demo.ng.bluemix.net/)

; Command prompt
; Index file: computer_sender -Asw_index.asm -S2000 temperature.wav
; Program Audio: computer_sender â€“COM4 -W -V temperature.wav
cseg
; Approximate index of sounds in file 'temperature.wav'
sound_index:
    db 0x00, 0x00, 0x2b ; 0 
    db 0x00, 0x5a, 0x93 ; 1 
    db 0x00, 0xa0, 0x07 ; 2 
    db 0x00, 0xe4, 0x1f ; 3 
    db 0x01, 0x25, 0x77 ; 4 
    db 0x01, 0x6b, 0x21 ; 5 
    db 0x01, 0xae, 0x5b ; 6 
    db 0x01, 0xfb, 0x75 ; 7 
    db 0x02, 0x4a, 0x7a ; 8 
    db 0x02, 0x8a, 0xd4 ; 9 
    db 0x02, 0xd4, 0xe8 ; 10 
    db 0x03, 0x17, 0x27 ; 11 
    db 0x03, 0x68, 0x4c ; 12 
    db 0x03, 0xac, 0xbe ; 13 
    db 0x04, 0x05, 0x67 ; 14 
    db 0x04, 0x60, 0x2c ; 15 
    db 0x04, 0xb9, 0xc1 ; 16 
    db 0x05, 0x1a, 0xac ; 17 
    db 0x05, 0x7f, 0x44 ; 18 
    db 0x05, 0xd4, 0x79 ; 19 
    db 0x06, 0x32, 0x49 ; 20 
    db 0x06, 0x7d, 0x21 ; 21 
    db 0x06, 0xc1, 0x8c ; 22 
    db 0x07, 0x0a, 0xd7 ; 23 
    db 0x07, 0x58, 0xf8 ; 24 
    db 0x07, 0xaf, 0x34 ; 25 
    db 0x08, 0x05, 0x3f ; 26 
    db 0x08, 0x49, 0xa9 ; 27 
    db 0x08, 0x9d, 0xa5 ; 28 
    db 0x09, 0x03, 0xe3 ; 29 
    db 0x09, 0x60, 0x9d ; 30 
    db 0x09, 0xc2, 0xc0 ; 31 
    db 0x09, 0xe5, 0xed 

; Size of each sound in 'sound_index'
Size_sound:
    db 0x00, 0x5a, 0x68 ; 0 
    db 0x00, 0x45, 0x74 ; 1 
    db 0x00, 0x44, 0x18 ; 2 
    db 0x00, 0x41, 0x58 ; 3 
    db 0x00, 0x45, 0xaa ; 4 
    db 0x00, 0x43, 0x3a ; 5 
    db 0x00, 0x4d, 0x1a ; 6 
    db 0x00, 0x4f, 0x05 ; 7 
    db 0x00, 0x40, 0x5a ; 8 
    db 0x00, 0x4a, 0x14 ; 9 
    db 0x00, 0x42, 0x3f ; 10 
    db 0x00, 0x51, 0x25 ; 11 
    db 0x00, 0x44, 0x72 ; 12 
    db 0x00, 0x58, 0xa9 ; 13 
    db 0x00, 0x5a, 0xc5 ; 14 
    db 0x00, 0x59, 0x95 ; 15 
    db 0x00, 0x60, 0xeb ; 16 
    db 0x00, 0x64, 0x98 ; 17 
    db 0x00, 0x55, 0x35 ; 18 
    db 0x00, 0x5d, 0xd0 ; 19 
    db 0x00, 0x4a, 0xd8 ; 20 
    db 0x00, 0x44, 0x6b ; 21 
    db 0x00, 0x49, 0x4b ; 22 
    db 0x00, 0x4e, 0x21 ; 23 
    db 0x00, 0x56, 0x3c ; 24 
    db 0x00, 0x56, 0x0b ; 25 
    db 0x00, 0x44, 0x6a ; 26 
    db 0x00, 0x53, 0xfc ; 27 
    db 0x00, 0x66, 0x3e ; 28 
    db 0x00, 0x5c, 0xba ; 29 
    db 0x00, 0x62, 0x23 ; 30 
    db 0x00, 0x23, 0x2d ; 31 

; The sound and its length from the two tables above is passed in the accumulator.
Play_Sound_Using_Index:

	setb SOUND ; Turn speaker on
	clr TMOD20 ; Stop the CCU from playing previous request
	setb FLASH_CE
	
	; There are three bytes per row in our tables, so multiply index by three
	mov b, #3
	mul ab
	mov R0, a ; Make a copy of the index*3
	
	clr FLASH_CE ; Enable SPI Flash
	mov a, #READ_BYTES
	lcall Send_SPI
	; Set the initial position in memory of where to start playing
	mov dptr, #sound_index
	mov a, R0
	movc a, @a+dptr
	lcall Send_SPI
	inc dptr
	mov a, R0
	movc a, @a+dptr
	lcall Send_SPI
	inc dptr
	mov a, R0
	movc a, @a+dptr
	lcall Send_SPI
	; Now set how many bytes to play
	mov dptr, #Size_sound
	mov a, R0
	movc a, @a+dptr
	mov w+2, a
	inc dptr
	mov a, R0
	movc a, @a+dptr
	mov w+1, a
	inc dptr
	mov a, R0
	movc a, @a+dptr
	mov w+0, a
	
	mov a, #0x00 ; Request first byte to send to DAC
	lcall Send_SPI
	
	setb TMOD20 ; Start playback by enabling CCU timer

	ret
